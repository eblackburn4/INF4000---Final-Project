theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text = element_text(size = 10),
axis.text.y = element_text(hjust = 1)) +
labs(title = 'Average popularity and number of releases, by month',
subtitle = 'Most songs are released in July, but the most popular are released in April') +
scale_colour_viridis_c()
seasonal_release_popularity
track_meta <- read.csv("Data/musicoset_metadata/tracks.csv", sep = "\t") |>
select(!c('album_id', 'track_number'))
artist_meta <- read_delim("Data/musicoset_metadata/artists.csv",
delim = "\t",          # Main delimiter seems to be tabs based on a visual inspection
escape_double = TRUE,  # Handle stray quotes
col_names = TRUE,
trim_ws = TRUE)
artist_meta <- artist_meta |>
select(artist_id, main_genre)
#read in song popularity data
song_pop <- read_delim("Data/musicoset_popularity/song_pop.csv", delim = "\t") |>
arrange(year) |>
select(song_id, year_end_score) |>
distinct(song_id, .keep_all = TRUE)
#read in data on musical fingerprints, drop unneeded columns
song_features <- read_delim("Data/musicoset_songfeatures/acoustic_features.csv", delim = "\t") |>
select(-c(duration_ms,key,mode,time_signature,tempo)) |>
drop_na()
#read in song metadata. This particular CSV isn't formatted properly so will require additional cleaning steps
song_meta <- read_delim(
"Data/musicoset_metadata/songs.csv",
delim = "\t",          # Main delimiter seems to be tabs based on a visual inspection
escape_double = TRUE,  # Handle stray quotes
col_names = TRUE,
trim_ws = TRUE
)
# function to clean extraneous symbols and text from the csv using regex
clean_csv <- function(x) {
if (is.character(x)) {
x <- str_remove_all(x, '^[",]+|[",]+$')
}
return(x)
}
# apply cleaning function to the whole csv and then split the csv manually using known column names from the musicOset data schema
song_meta <- song_meta |>
mutate(across(everything(), clean_csv)) |>
separate(col = names(song_meta)[1],
into = c("song_id", "song_name", "billboard", "artists", "popularity", "explicit", "song_type"),
sep = "\t",
fill = "right",
extra = "merge") |>
select(!c("billboard"))
#split up 'artists' column so to isolate the artist_ids for matching purposes and to separate out multiple artists, in the case of collaborations, then clean up extraneous characters
song_meta <- song_meta |>
separate(artists, into = c("artist1", "artist2"), sep = ", ", remove = FALSE) |>
separate(artist1, into = c('artist1_id','artist1_name'), sep = ':', remove = FALSE) |>
separate(artist2, into = c('artist2_id','artist2_name'), sep = ':', remove = FALSE)
song_meta$artist1_id <- gsub("[{}']", "", song_meta$artist1_id)
song_meta$artist1_name <- gsub("[{}']", "", song_meta$artist1_name)
song_meta$artist1_name <- trimws(song_meta$artist1_name)
song_meta$artist2_id <- gsub("[{}']", "", song_meta$artist2_id)
song_meta$artist2_name <- gsub("[{}']", "", song_meta$artist2_name)
song_meta$artist2_name <- trimws(song_meta$artist2_name)
#Join everything together to create the master dataset for hits
hits_master <- inner_join(song_meta, track_meta, by = 'song_id') |>
inner_join(song_pop, by = 'song_id') |>
inner_join(artist_meta, by = c('artist1_id' = 'artist_id')) |>
inner_join(song_features, by = 'song_id') |>
select(!c(artists,artist1,artist2))
#split out 'year' value from release date for consistency across releases in terms of granularity, and split out month for seasonal analysis
#filter for only songs released after 1962, when the dataset is supposed to begin
hits_master <- hits_master |>
mutate(release_year = str_sub(release_date,1,4)) |>
mutate(release_month = as.date(str_sub(release_date,6,7))) |>
filter(release_year > 1961) |>
mutate(era = ifelse(release_year >= 1991,1,0))
track_meta <- read.csv("Data/musicoset_metadata/tracks.csv", sep = "\t") |>
select(!c('album_id', 'track_number'))
artist_meta <- read_delim("Data/musicoset_metadata/artists.csv",
delim = "\t",          # Main delimiter seems to be tabs based on a visual inspection
escape_double = TRUE,  # Handle stray quotes
col_names = TRUE,
trim_ws = TRUE)
artist_meta <- artist_meta |>
select(artist_id, main_genre)
#read in song popularity data
song_pop <- read_delim("Data/musicoset_popularity/song_pop.csv", delim = "\t") |>
arrange(year) |>
select(song_id, year_end_score) |>
distinct(song_id, .keep_all = TRUE)
#read in data on musical fingerprints, drop unneeded columns
song_features <- read_delim("Data/musicoset_songfeatures/acoustic_features.csv", delim = "\t") |>
select(-c(duration_ms,key,mode,time_signature,tempo)) |>
drop_na()
#read in song metadata. This particular CSV isn't formatted properly so will require additional cleaning steps
song_meta <- read_delim(
"Data/musicoset_metadata/songs.csv",
delim = "\t",          # Main delimiter seems to be tabs based on a visual inspection
escape_double = TRUE,  # Handle stray quotes
col_names = TRUE,
trim_ws = TRUE
)
# function to clean extraneous symbols and text from the csv using regex
clean_csv <- function(x) {
if (is.character(x)) {
x <- str_remove_all(x, '^[",]+|[",]+$')
}
return(x)
}
# apply cleaning function to the whole csv and then split the csv manually using known column names from the musicOset data schema
song_meta <- song_meta |>
mutate(across(everything(), clean_csv)) |>
separate(col = names(song_meta)[1],
into = c("song_id", "song_name", "billboard", "artists", "popularity", "explicit", "song_type"),
sep = "\t",
fill = "right",
extra = "merge") |>
select(!c("billboard"))
#split up 'artists' column so to isolate the artist_ids for matching purposes and to separate out multiple artists, in the case of collaborations, then clean up extraneous characters
song_meta <- song_meta |>
separate(artists, into = c("artist1", "artist2"), sep = ", ", remove = FALSE) |>
separate(artist1, into = c('artist1_id','artist1_name'), sep = ':', remove = FALSE) |>
separate(artist2, into = c('artist2_id','artist2_name'), sep = ':', remove = FALSE)
song_meta$artist1_id <- gsub("[{}']", "", song_meta$artist1_id)
song_meta$artist1_name <- gsub("[{}']", "", song_meta$artist1_name)
song_meta$artist1_name <- trimws(song_meta$artist1_name)
song_meta$artist2_id <- gsub("[{}']", "", song_meta$artist2_id)
song_meta$artist2_name <- gsub("[{}']", "", song_meta$artist2_name)
song_meta$artist2_name <- trimws(song_meta$artist2_name)
#Join everything together to create the master dataset for hits
hits_master <- inner_join(song_meta, track_meta, by = 'song_id') |>
inner_join(song_pop, by = 'song_id') |>
inner_join(artist_meta, by = c('artist1_id' = 'artist_id')) |>
inner_join(song_features, by = 'song_id') |>
select(!c(artists,artist1,artist2))
#split out 'year' value from release date for consistency across releases in terms of granularity, and split out month for seasonal analysis
#filter for only songs released after 1962, when the dataset is supposed to begin
hits_master <- hits_master |>
mutate(release_year = str_sub(release_date,1,4)) |>
mutate(release_month = as.Date(str_sub(release_date,6,7))) |>
filter(release_year > 1961) |>
mutate(era = ifelse(release_year >= 1991,1,0))
track_meta <- read.csv("Data/musicoset_metadata/tracks.csv", sep = "\t") |>
select(!c('album_id', 'track_number'))
artist_meta <- read_delim("Data/musicoset_metadata/artists.csv",
delim = "\t",          # Main delimiter seems to be tabs based on a visual inspection
escape_double = TRUE,  # Handle stray quotes
col_names = TRUE,
trim_ws = TRUE)
artist_meta <- artist_meta |>
select(artist_id, main_genre)
#read in song popularity data
song_pop <- read_delim("Data/musicoset_popularity/song_pop.csv", delim = "\t") |>
arrange(year) |>
select(song_id, year_end_score) |>
distinct(song_id, .keep_all = TRUE)
#read in data on musical fingerprints, drop unneeded columns
song_features <- read_delim("Data/musicoset_songfeatures/acoustic_features.csv", delim = "\t") |>
select(-c(duration_ms,key,mode,time_signature,tempo)) |>
drop_na()
#read in song metadata. This particular CSV isn't formatted properly so will require additional cleaning steps
song_meta <- read_delim(
"Data/musicoset_metadata/songs.csv",
delim = "\t",          # Main delimiter seems to be tabs based on a visual inspection
escape_double = TRUE,  # Handle stray quotes
col_names = TRUE,
trim_ws = TRUE
)
# function to clean extraneous symbols and text from the csv using regex
clean_csv <- function(x) {
if (is.character(x)) {
x <- str_remove_all(x, '^[",]+|[",]+$')
}
return(x)
}
# apply cleaning function to the whole csv and then split the csv manually using known column names from the musicOset data schema
song_meta <- song_meta |>
mutate(across(everything(), clean_csv)) |>
separate(col = names(song_meta)[1],
into = c("song_id", "song_name", "billboard", "artists", "popularity", "explicit", "song_type"),
sep = "\t",
fill = "right",
extra = "merge") |>
select(!c("billboard"))
#split up 'artists' column so to isolate the artist_ids for matching purposes and to separate out multiple artists, in the case of collaborations, then clean up extraneous characters
song_meta <- song_meta |>
separate(artists, into = c("artist1", "artist2"), sep = ", ", remove = FALSE) |>
separate(artist1, into = c('artist1_id','artist1_name'), sep = ':', remove = FALSE) |>
separate(artist2, into = c('artist2_id','artist2_name'), sep = ':', remove = FALSE)
song_meta$artist1_id <- gsub("[{}']", "", song_meta$artist1_id)
song_meta$artist1_name <- gsub("[{}']", "", song_meta$artist1_name)
song_meta$artist1_name <- trimws(song_meta$artist1_name)
song_meta$artist2_id <- gsub("[{}']", "", song_meta$artist2_id)
song_meta$artist2_name <- gsub("[{}']", "", song_meta$artist2_name)
song_meta$artist2_name <- trimws(song_meta$artist2_name)
#Join everything together to create the master dataset for hits
hits_master <- inner_join(song_meta, track_meta, by = 'song_id') |>
inner_join(song_pop, by = 'song_id') |>
inner_join(artist_meta, by = c('artist1_id' = 'artist_id')) |>
inner_join(song_features, by = 'song_id') |>
select(!c(artists,artist1,artist2))
#split out 'year' value from release date for consistency across releases in terms of granularity, and split out month for seasonal analysis, removing leading zeros
#filter for only songs released after 1962, when the dataset is supposed to begin
hits_master <- hits_master |>
mutate(release_year = str_sub(release_date,1,4)) |>
mutate(release_month = str_sub(release_date,6,7)) |>
mutate(release_month = str_remove(release_month, "^0+")) |>
filter(release_year > 1961) |>
mutate(era = ifelse(release_year >= 1991,1,0))
hits_master$popularity <- as.numeric(hits_master$popularity)
hits_master$release_year <- as.numeric(hits_master$release_year)
hits_master$release_date <- as.Date(hits_master$release_date)
#also load in musical fingerprint data for non-hits for the bump chart, convert variables to numeric
#drop rows without musical fingerprint data by converting them to NAs, and remove other impossible values (tempos of 0)
non_hits_subset <- colnames(non_hits)[16:23]
non_hits <- read_delim('Data/nonhits_dataset.csv', delim = '\t') |>
filter(!if_any(all_of(non_hits_subset), ~ . == "-")) |>
filter(tempo != 0) |>
mutate(across(16:23, as.numeric)) |>
drop_na() |>
filter(!if_all(all_of(non_hits_subset), ~ . == 0))
#combine loudness column from both hits and non-hits so that they can be rescaled to between 0 and 1 consistently
loudness_hits <- hits_master |>
select(song_id,loudness) |>
mutate(source = 'hits')
loudness_nonhits <- non_hits |>
select(song_id,loudness) |>
mutate(source = 'nonhits')
#rescale loudness values, then join back into individual hits/non-hits datasets
loudness_combined <- bind_rows(loudness_hits,loudness_nonhits) |>
mutate(loudness_scaled = ((loudness - min(loudness)) / (max(loudness) - min(loudness)))) |>
select(song_id, loudness_scaled )
hits_master <- hits_master |>
left_join(loudness_combined, by = 'song_id')
non_hits <- non_hits |>
left_join(loudness_combined, by = 'song_id')
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
View(hits_by_month)
seasonal_release_popularity <- hits_by_month |>
ggplot(aes(x = release_month, y = pop, group = era)) +
scale_x_discrete(breaks = 1:12, labels = month.abb[1:12]) +
geom_line(aes(color = era)) +
geom_point(aes(color = era),size = 3) +
theme_ipsum_rc(grid = 'XY') +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text = element_text(size = 10),
axis.text.y = element_text(hjust = 1)) +
labs(title = 'Average popularity and number of releases, by month',
subtitle = 'Most songs are released in July, but the most popular are released in April') +
scale_colour_viridis_c()
seasonal_release_popularity
str(hits_by_month$release_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases)) |>
factor(release_month, levels = as.character(sort(as.numeric(release_month))))
hits_by_month <- hits_by_month |>
factor(release_month, levels = as.character(sort(as.numeric(release_month))))
hits_by_month$release_month <- factor(hits_by_month$release_month,
levels = as.character(sort(as.numeric(hits_by_month$release_month))))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, as.numeric(release_month)) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
View(hits_by_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
View(hits_by_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, as_factor(release_month)) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
View(hits_by_month)
?as_factor
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases)) |>
arrange(release_month)
View(hits_by_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases)) |>
arrange(era, release_month)
View(hits_by_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases)) |>
arrange(era, as_integer(release_month))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases)) |>
arrange(era, as.integer(release_month))
View(hits_by_month)
seasonal_release_heatmap <-  hits_by_month |>
ggplot(aes(era, release_month, fill = releases_prop)) +
geom_tile(colour="white",size = 1, stat="identity") +
scale_fill_viridis(option="G") +
scale_y_discrete(breaks=1:12, labels=month.abb[1:12]) +
scale_x_continuous(breaks = c(0,1), labels = c('1960-1990','1991-2019'))+
xlab("") +
ylab("") +
theme(
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size=12, family = 'Roboto Condensed'),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
legend.text = element_text(color="black", size= 10),
legend.background = element_rect(fill="white"),
legend.position = "none",
legend.title=element_blank(),
axis.text.y = element_text(margin = margin(r = 10), hjust = 1),
plot.margin = margin(5, 5, 5, 5)) +
coord_flip()
seasonal_release_heatmap
seasonal_release_popularity <- hits_by_month |>
ggplot(aes(x = release_month, y = pop, group = era)) +
scale_x_discrete(breaks = 1:12, labels = month.abb[1:12]) +
geom_line(aes(color = era)) +
geom_point(aes(color = era),size = 3) +
theme_ipsum_rc(grid = 'XY') +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text = element_text(size = 10),
axis.text.y = element_text(hjust = 1)) +
labs(title = 'Average popularity and number of releases, by month',
subtitle = 'Most songs are released in July, but the most popular are released in April') +
scale_colour_viridis_c()
seasonal_release_popularity
View(hits_by_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
mutate(release_month = as_date(release_month)) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
mutate(release_month = month.name(release_month)) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
mutate(release_month = month.abb(release_month)) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
mutate(release_month = month.abb()) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
mutate(release_month = month.abb) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases))
View(hits_by_month)
hits_by_month <- hits_master |>
filter(release_month != '') |>
filter(!str_detect(release_date, "-01-01")) |>
select(song_id,year_end_score,release_month,era) |>
group_by(era, release_month) |>
summarise(total_releases = n(), pop = mean(year_end_score)) |>
ungroup() |>
group_by(era) |>
mutate(releases_prop = total_releases/sum(total_releases)) |>
mutate(release_month = month.abb)
View(hits_by_month)
seasonal_release_heatmap <-  hits_by_month |>
ggplot(aes(era, release_month, fill = releases_prop)) +
geom_tile(colour="white",size = 1, stat="identity") +
scale_fill_viridis(option="G") +
scale_x_continuous(breaks = c(0,1), labels = c('1960-1990','1991-2019'))+
xlab("") +
ylab("") +
theme(
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size=12, family = 'Roboto Condensed'),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
legend.text = element_text(color="black", size= 10),
legend.background = element_rect(fill="white"),
legend.position = "none",
legend.title=element_blank(),
axis.text.y = element_text(margin = margin(r = 10), hjust = 1),
plot.margin = margin(5, 5, 5, 5)) +
coord_flip()
seasonal_release_heatmap
seasonal_release_popularity <- hits_by_month |>
ggplot(aes(x = release_month, y = pop, group = era)) +
geom_line(aes(color = era)) +
geom_point(aes(color = era),size = 3) +
theme_ipsum_rc(grid = 'XY') +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text = element_text(size = 10),
axis.text.y = element_text(hjust = 1)) +
labs(title = 'Average popularity and number of releases, by month',
subtitle = 'Most songs are released in July, but the most popular are released in April') +
scale_colour_viridis_c()
seasonal_release_popularity
View(hits_by_month)
seasonal_release_popularity <- hits_by_month |>
ggplot(aes(x = release_month, y = pop, group = era)) +
scale_x_discrete(breaks = 1:12, labels = month.abb[1:12]) +
geom_line(aes(color = era)) +
geom_point(aes(color = era),size = 3) +
theme_ipsum_rc(grid = 'XY') +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text = element_text(size = 10),
axis.text.y = element_text(hjust = 1)) +
labs(title = 'Average popularity and number of releases, by month',
subtitle = 'Most songs are released in July, but the most popular are released in April') +
scale_colour_viridis_c()
seasonal_release_popularity
